def showWord(w):
    hex_string = ""
    for i in range(1, 9):
        hexan = (w >> (32 - i * 4)) & 0xF
        hex_string += f"{hexan:X}"  # Tạo chuỗi đại diện cho giá trị hex
    return hex_string  # Trả về chuỗi hex

# Dịch sang trái 1 byte
def rotWord(w):
    byte1 = (w >> 24) & 0xFF       # Byte 1 (byte cao nhất)
    byte234 = w & 0xFFFFFF         # 3 byte cuối
    rot = (byte234 << 8) | byte1  # byte234 << 8 dịch byte234 lên 8 bit để chừa chỗ cho byte1

    # temp = showWord(w)             # Lấy chuỗi đại diện cho w
    # afterRotWord = showWord(rot)   # Lấy chuỗi đại diện cho rot
    # print(f"Rotword({temp})= {afterRotWord}")
    
    return rot
 
def subWord(w):
    s = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 
				0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 
				0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 
				0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 
				0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 
				0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 
				0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 
				0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 
				0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 
				0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 
				0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 
				0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 
				0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 
				0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 
				0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 
				0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
			]
    kq = 0
    for i in range (1,5):
        bytei = (w >> (32 - i * 8)) & 0xFF 
        subB = s[bytei]
        kq = (kq << 8) | subB
    return kq

def xorRcon(w, j):
    rc = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39]
    byte1 = (w >> 24) & 0xFF
    byte234 = w & 0xFFFFFF
    kqXor = (byte1 ^ rc[j]) & 0xFF
    kq = (kqXor << 24) | byte234
    return kq

def G(w, j):
    rotW = rotWord(w)
    subW = subWord(rotW)
    kq = xorRcon(subW, j)
    
    temp = showWord(w)             # Lấy chuỗi đại diện cho w
    result = showWord(kq)   # Lấy chuỗi đại diện cho rot
    # print(f"G({temp})= {result}")
    return kq

def keyExpansion(key):
    w = [0] * 44
    w[0] = key[0]
    w[1] = key[1]
    w[2] = key[2]
    w[3] = key[3]

    for i in range(4,44):
        if (i % 4 == 0):
            w[i] = G(w[i-1], i//4) ^  w[i -4]
        else:
            w[i] = w[i - 1] ^ w[i - 4]
        # print(f"w[{i}] = {showWord(w[i])}")
    
    return w

def addRoundKey(state, key):
    kq = [0] * 4
    kq[0] = state[0] ^ key[0]
    kq[1] = state[1] ^ key[1]
    kq[2] = state[2] ^ key[2]
    kq[3] = state[3] ^ key[3]

    # for i in range(0, 4):
    #     print(f'{showWord(kq[i])}')
    return kq

def subBytes(state):
    kq = [0] * 4
    for i in range(0, 4):
        kq[i] = subWord(state[i])

    # for i in range(0, 4):
    #     print(f'{showWord(kq[i])}')
    return kq

def shiftRows(subByte):
    kq = [0] * 4

    for i in range(0, 4):
        byte1 = subByte[i] & 0xFF000000
        byte2 = subByte[(i + 1) % 4] & 0xFF0000
        byte3 = subByte[(i + 2) % 4] & 0xFF00
        byte4 = subByte[(i + 3)  % 4] & 0xFF
        kq[i] = byte1 | byte2 | byte3 | byte4

    # for i in range(0, 4):
    #     print(f'{showWord(kq[i])}')
    return kq

def nhan2(w):
    kq = w << 1
    if kq > 256:
        kq = kq ^ 0x11b
    kq = kq & 0xFF
    return kq

def nhan3(w):
    kq = w ^ nhan2(w)
    kq = kq & 0xFF
    return kq

def nhanCot(w):
    kq = [0] * 4
    byte1 = (w >> 24) & 0xFF
    byte2 = (w >> 16) & 0xFF
    byte3 = (w >> 8) & 0xFF
    byte4 = w & 0xFF
    
    kq1 = nhan2(byte1) ^ nhan3(byte2) ^ byte3 ^ byte4
    kq2 = byte1 ^ nhan2(byte2) ^ nhan3(byte3) ^ byte4
    kq3 = byte1 ^ byte2 ^ nhan2(byte3) ^ nhan3(byte4)
    kq4 = nhan3(byte1) ^ byte2 ^ byte3 ^ nhan2(byte4)

    kq = (kq1 << 24) | (kq2 << 16) | (kq3 << 8) | kq4
    # print(f'{showWord(kq)}')
    return kq

def mixColumns(state):
    kq = [0] * 4
    for i in range(0, 4):
        kq[i] = nhanCot(state[i])
    return kq

def showMatrix(w):
    for i in range(4):  
        print("\t" + showWord(w[i]))

def encrypt(state, key):
    w = keyExpansion(key)
    state = addRoundKey(state, w)
    for i in range(1, 10):
        state = subBytes(state)
        state = shiftRows(state)
        state = mixColumns(state)
        state = addRoundKey(state, w[4*i: 4*i+4])

        # print(f'Vòng {i} = ') 
        # showMatrix(state)

    state = subBytes(state)
    state = shiftRows(state)
    state = addRoundKey(state, w[40:45])
    # print(f'Vòng 10 = ') 
    # showMatrix(state)
    kq = [0] * 4
    kq = state
    return kq

w0 = 0x2b7e1516
w1 = 0x28aed2a6
w2 = 0xabf71588
w3 = 0x09cf4f3c

key = [w0, w1, w2, w3]
state = []
state.append(0x3243f6a8)
state.append(0x885a308d)
state.append(0x313198a2)
state.append(0xe0370734)

# c = encrypt(state, key)
# print('Bản mã: ')
# showMatrix(c)
